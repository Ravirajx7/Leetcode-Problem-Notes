/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
     
        // check if root is null     
        if(root == null) return new ArrayList<>();
        
        List<Integer> res = new ArrayList<>();
        
        // we have to return inorder - it means first time value of left node then root then right 
        
        // one thing to note here is that at first the leaves left value will be printed then from down we will come to top from down
        
        inOrder(root,res);
        
        return res;
        
    }
    
    public void inOrder(TreeNode root,List<Integer> res) {
        
        if(root==null) return;
        
        
        inOrder(root.left,res);
        
        res.add(root.val);
        
        inOrder(root.right,res);
    
    }
    
    //Additionally we can do all traversal like below :
    
    public void preorder(TreeNode root, List<Integer> nums) {
           if (root == null) return;
           nums.add(root.val);
           preorder(root.left, nums);
           preorder(root.right, nums);
  }
  
  public void postorder(TreeNode root, List<Integer> nums) {
          if (root == null) return;
          postorder(root.left, nums);
          postorder(root.right, nums);
          nums.add(root.val);
}
  
  
        
}
