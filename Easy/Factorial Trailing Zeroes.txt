class Solution {
    public int trailingZeroes(int n) {
	
        // https://leetcode.com/problems/factorial-trailing-zeroes/
			
		// if the number passed n is 0 - means 0! = 1 , which doesn't have any trailingZeroes - return 0
		
		// for any factorial to have trailingZeroes it should be multiple of 2 and 5. However, the number of 2s as factor are more than 5s for a
	
	   // The logic is to return the minimum of 2 or 5 which means 5s will always be less

	  // hence for any number we'll return the 1/5+2/25+
	  
	  // for example, 25 have two 5 factors, 125 have three 5 factors. In the n! operation
	  
	   // So we just count how many 5 factors in all number from 1 to n.
	   
	// 5=1*5, 10=2*5, 15=3*5, 20=4*5, 25=5*5, 30=6*5 ... , 50=10*5=2*5*5, did you see that the numbers before each 5 in the multiplications: 1,2,3,4,5,6,...,10 has formed the (n/5) subproblem?
	   
        return n==0 ? 0 : n/5 + trailingZeroes(n/5);
        
    }
}